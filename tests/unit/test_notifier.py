# -*- coding: utf-8 -*-
"""Defines unit tests for h.notifier."""
from mock import patch, Mock
from pyramid.testing import DummyRequest, testConfig
from datetime import datetime

from h import events, notifier


class QueryMock(object):
    """This class is used to simulate user subscription queries"""
    # pylint: disable=too-few-public-methods

    def __init__(self, active=False, query=None, template=""):
        self.active = active
        self.query = query or {}
        self.template = template


def create_annotation():
    annotation = {
        'id': '2',
        'title': 'Example annotation',
        'quote': '',
        'text': 'this is a reply',
        'user': 'acct:testuser@testdomain',
        'permissions': {'read': ["group:__world__"]},
        'created': datetime.now(),
    }
    annotation_parent = {
        'uri': 'http://example.com',
        'quote': 'parent quote',
        'text': 'parent text',
        'created': datetime.now(),
        'user': 'acct:parent@testdomain',
        'id': '1',
    }
    annotation['parent'] = annotation_parent
    return annotation


# Tests for handling AnnotationEvent
def test_authorization():
    """Make sure private annotations don't send notifications
    """
    annotation = {'permissions': {'read': ['acct:test@example.com']}}
    request = DummyRequest()
    event = events.AnnotationEvent(request, annotation, 'create')

    with patch('h.notifier.AnnotationNotifier') as mock:
        notifier.send_notifications(event)
        assert mock.call_count == 0


# Tests for AnnotationNotifier
def test_template_registration():
    """Make sure the AnnotatioNotifier uses the given key and function
    for template registration"""

    def test_fn():
        """Dummy test function"""
        pass

    notifier.AnnotationNotifier.register_template('test_template', test_fn)
    templates = notifier.AnnotationNotifier.registered_templates
    assert 'test_template' in templates
    assert templates['test_template'] == test_fn


def test_false_templates():
    """Make sure we do not process anything for false templates"""
    request = DummyRequest()
    notif = notifier.AnnotationNotifier(request)
    with patch.object(notif, '_send_annotation') as send:
        notif.send_notification_to_owner({}, {}, 'false_template')
        assert send.called is False


def test_bad_status():
    """Make sure if a renderer throws a false status (i.e. for errors)
    then no notification is sent"""

    def test_generator(request, annotation, data):
        # pylint: disable=unused-argument
        """Our test template function, auto fails"""
        return {"status": False}

    notifier.AnnotationNotifier.register_template("test", test_generator)
    request = DummyRequest()
    notif = notifier.AnnotationNotifier(request)
    with patch.object(notif, '_send_annotation') as send:
        notif.send_notification_to_owner({}, {}, 'test')
        assert send.call_count == 0


def test_template_parameters():
    """Make sure the body, html, subject, recipients fields are correct"""

    def test_generator(request, annotation, data):
        # pylint: disable=unused-argument
        """Our test template function"""
        return {
            "status": True,
            "text": "Test body",
            "html": "Test html",
            "subject": "Test subject",
            "recipients": ["Test user"]
        }

    notifier.AnnotationNotifier.register_template("test", test_generator)
    request = DummyRequest()
    notif = notifier.AnnotationNotifier(request)
    with patch.object(notif, '_send_annotation') as send:
        notif.send_notification_to_owner({}, {}, 'test')
        assert send.called_with('Test body', 'Test subject', ['Test user'])


# Tests for notifier.NotificationTemplate
def test_check_conditions():
    """Make sure if the check_conditions() returns False then the
    generate_notification returns with a false status"""

    class FalseTemplate(notifier.NotificationTemplate):
        """Our false template class"""
        # pylint: disable=abstract-method

        @staticmethod
        def check_conditions(annotation, data):
            """This is our false condition function"""
            return False
    result = FalseTemplate.generate_notification({}, {}, {})
    assert result['status'] is False


def test_subject_and_recipients():
    """Make sure the recipients are generated by the get_recipients() and
    template, subject are generated by render()"""

    class TestTemplate(notifier.NotificationTemplate):
        """Our test template class"""
        # pylint: disable=abstract-method

        @staticmethod
        def get_recipients(request, annotation, data):
            """Our mock get_recipients function"""
            return ["test user"]

        @classmethod
        def render(cls, request, annotation):
            """Our mock render function"""
            return "test subject", "test body", "test html"

    result = TestTemplate.generate_notification({}, {}, {})
    assert result['status'] is True
    assert result['recipients'] == ['test user']
    assert result['text'] == 'test body'
    assert result['html'] == 'test html'
    assert result['subject'] == 'test subject'


# Tests for reply notifications
def test_reply_registration():
    """We should have registered the ReplyTemplate.generate_notification"""
    templates = notifier.AnnotationNotifier.registered_templates
    assert 'reply_notification' in templates
    registered_fn = templates['reply_notification']
    right_fn = notifier.ReplyTemplate.generate_notification
    assert registered_fn == right_fn


def test_reply_query_match():
    """Test if the notifier.send_notifications is called
    """
    annotation = {
        'user': 'acct:testuser@testdomain',
        'permissions': {'read': ["group:__world__"]}
    }
    request = DummyRequest()
    event = events.AnnotationEvent(request, annotation, 'create')

    with patch('h.notifier.AnnotationNotifier') as mock_notif:
        with patch('h.notifier.parent_values') as mock_parent:
            mock_parent.return_value = {'user': 'acct:parent@testdomain'}
            notifier.send_notifications(event)
            assert mock_notif().send_notification_to_owner.call_count == 1


def test_reply_notification_content():
    """
    The reply notification should have a subject, and both plain and
    html bodies.
    """
    with testConfig() as config:
        config.include('pyramid_chameleon')

        annotation = create_annotation()
        request = DummyRequest()

        with patch('h.auth.local.models.User') as mock_user:
            user = Mock(email='acct:parent@testdomain')
            mock_user.get_by_username.return_value = user

            notification = notifier.ReplyTemplate.generate_notification(
                request, annotation, {})

            assert notification['status']
            assert notification['recipients'] == ['acct:parent@testdomain']
            assert 'testuser has just left a reply on your annotation' in \
                notification['text']
            assert '<a href="http://example.com/u/testuser">testuser</a> '\
                'has just left a reply on your annotation' \
                in notification['html']
            assert notification['subject'] == \
                'testuser has just replied to your annotation on ' \
                '"Example annotation"\n'


def test_reply_notification_no_recipient():
    """
    The reply notification should have a False status if the recipient cannot
    be found in the User table.
    """
    with testConfig() as config:
        config.include('pyramid_chameleon')

        annotation = create_annotation()
        request = DummyRequest()

        with patch('h.auth.local.models.User') as mock_user:
            mock_user.get_by_username.return_value = None

            notification = notifier.ReplyTemplate.generate_notification(
                request, annotation, {})

            assert notification['status'] is False


def test_reply_username_mismatch():
    """Username different, domain the same -> should send reply"""
    annotation = {
        'user': 'acct:testuser@testdomain',
        'permissions': {'read': ["group:__world__"]}
    }
    request = DummyRequest()
    event = events.AnnotationEvent(request, annotation, 'create')

    with patch('h.notifier.AnnotationNotifier') as mock_notif:
        with patch('h.notifier.parent_values') as mock_parent:
            mock_parent.return_value = {'user': 'acct:testuser2@testdomain'}
            notifier.send_notifications(event)
            assert mock_notif().send_notification_to_owner.call_count == 1

def test_reply_domain_mismatch():
    """Username same, domain different -> should send reply"""
    annotation = {
        'user': 'acct:testuser@testdomain',
        'permissions': {'read': ["group:__world__"]}
    }
    request = DummyRequest()
    event = events.AnnotationEvent(request, annotation, 'create')

    with patch('h.notifier.AnnotationNotifier') as mock_notif:
        with patch('h.notifier.parent_values') as mock_parent:
            mock_parent.return_value = {'user': 'acct:testuser@testdomain2'}
            notifier.send_notifications(event)
            assert mock_notif().send_notification_to_owner.call_count == 1

def test_reply_same_creator():
    """Username same, domain same -> should not send reply"""
    annotation = {
        'user': 'acct:testuser@testdomain',
        'permissions': {'read': ["group:__world__"]}
    }
    request = DummyRequest()
    event = events.AnnotationEvent(request, annotation, 'create')

    with patch('h.notifier.AnnotationNotifier') as mock_notif:
        with patch('h.notifier.parent_values') as mock_parent:
            mock_parent.return_value = {'user': 'acct:testuser@testdomain'}
            notifier.send_notifications(event)
            assert mock_notif().send_notification_to_owner.call_count == 0


def test_no_parent_user():
    """Should not throw or send annotation if the parent user is missing"""
    annotation = {
        'user': 'acct:testuser@testdomain',
        'permissions': {'read': ["group:__world__"]}
    }
    request = DummyRequest()
    event = events.AnnotationEvent(request, annotation, 'create')

    with patch('h.notifier.AnnotationNotifier') as mock_notif:
        with patch('h.notifier.parent_values') as mock_parent:
            mock_parent.return_value = {}
            notifier.send_notifications(event)
            assert mock_notif().send_notification_to_owner.call_count == 0


def test_reply_update():
    """Should not do anything if the action is update"""
    annotation = {
        'user': 'acct:testuser@testdomain',
        'permissions': {'read': ["group:__world__"]}
    }
    request = DummyRequest()
    event = events.AnnotationEvent(request, annotation, 'update')

    with patch('h.notifier.AnnotationNotifier') as mock_notif:
        with patch('h.notifier.parent_values') as mock_parent:
            mock_parent.return_value = {}
            notifier.send_notifications(event)
            assert mock_notif().send_notification_to_owner.call_count == 0
