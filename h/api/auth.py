# -*- coding: utf-8 -*-

import datetime

import jwt
from jwt import InvalidTokenError
from pyramid import security


def translate_annotation_principals(principals):
    """
    Translate a list of annotation principals to a list of pyramid principals.
    """
    result = set([])
    for principal in principals:
        # Ignore suspicious principals from annotations
        if principal.startswith('system.'):
            continue
        if principal == 'group:__world__':
            result.add(security.Everyone)
        elif principal == 'group:__authenticated__':
            result.add(security.Authenticated)
        else:
            result.add(principal)
    return list(result)


def generate_bearer_token(request, expires_in):
    """Return a signed JSON Web Token for the given request.

    The token can be used in the Authorization header in subsequent requests to
    the API to authenticate the user identified by the
    request.authenticated_userid of the _current_ request.

    :param request: the HTTP request to return a token for, the token will
        authenticate the userid given by this request's authenticated_userid
        property
    :type request: pyramid.request.Request

    :param expires_in: when the returned token should expire, in seconds from
        the current time
    :type expires_in: int

    :returns: a signed JSON Web Token
    :rtype: string

    """
    now = datetime.datetime.utcnow().replace(microsecond=0)
    ttl = datetime.timedelta(seconds=expires_in)

    claims = {
        'iss': request.registry.settings['h.client_id'],
        'aud': request.host_url,
        'sub': request.authenticated_userid,
        'exp': now + ttl,
        'iat': now,
    }

    return jwt.encode(claims, request.registry.settings['h.client_secret'])


def userid_from_bearer_token(request):
    """Return the userid authenticated by the given request's JWT bearer token.

    If the request contains a token generated by generate_bearer_token() above
    in its Authorization header then return the userid authenticated by the
    token.

    If the request contains no token, or the token is invalid, return None.

    :param request: the request whose Authorization header to check
    :type request: pyramid.request.Request

    :returns: the userid authenticated by the request's JWT or None
    :rtype: unicode or None

    """
    if 'Authorization' not in request.headers:
        return None

    # The part of the Authorization header following "Bearer " is the JWT.
    token = request.headers['Authorization'][len('Bearer '):]

    try:
        return jwt.decode(token,
                          key=request.registry.settings['h.client_secret'],
                          audience=request.host_url,
                          leeway=240,
                          algorithms=['HS256']).get('sub')
    except InvalidTokenError:
        return None
