# -*- coding: utf-8 -*-

import datetime

import jwt
from jwt import InvalidTokenError
from pyramid import security

from h import models
from h.api.models.token import API_TOKEN_PREFIX


def translate_annotation_principals(principals):
    """
    Translate a list of annotation principals to a list of pyramid principals.
    """
    result = set([])
    for principal in principals:
        # Ignore suspicious principals from annotations
        if principal.startswith('system.'):
            continue
        if principal == 'group:__world__':
            result.add(security.Everyone)
        elif principal == 'group:__authenticated__':
            result.add(security.Authenticated)
        else:
            result.add(principal)
    return list(result)


def generate_jwt(request, expires_in):
    """Return a signed JSON Web Token for the given request.

    The token can be used in the Authorization header in subsequent requests to
    the API to authenticate the user identified by the
    request.authenticated_userid of the _current_ request.

    :param request: the HTTP request to return a token for, the token will
        authenticate the userid given by this request's authenticated_userid
        property
    :type request: pyramid.request.Request

    :param expires_in: when the returned token should expire, in seconds from
        the current time
    :type expires_in: int

    :returns: a signed JSON Web Token
    :rtype: string

    """
    now = datetime.datetime.utcnow().replace(microsecond=0)

    claims = {
        'iss': request.registry.settings['h.client_id'],
        'aud': request.host_url,
        'sub': request.authenticated_userid,
        'exp': now + datetime.timedelta(seconds=expires_in),
        'iat': now,
    }

    return jwt.encode(claims,
                      request.registry.settings['h.client_secret'],
                      algorithm='HS256')


def userid_from_jwt(token, request):
    """Return the userid authenticated by the given JWT.

    If token is a token generated by generate_jwt() above then return the
    userid authenticated by the token.

    If the token is not a valid JWT bearer token, return None.

    Note: this assumes that the prefix "Bearer " has already been stripped
    from token.

    :param token: the JWT to check
    :type request: unicode

    :returns: the userid authenticated by the JWT or None
    :rtype: unicode or None

    """
    try:
        return jwt.decode(token,
                          key=request.registry.settings['h.client_secret'],
                          audience=request.host_url,
                          leeway=240,
                          algorithms=['HS256']).get('sub')
    except InvalidTokenError:
        return None


def userid_from_api_token(token):
    """
    Return the userid authenticated by the given API token.

    If token is a valid API token then return the corresponding userid,
    otherwise return None.

    Note: this assumes that the prefix "Bearer " has already been stripped
    from token.

    :param token: the token to check
    :type request: unicode

    :returns: the userid authenticated by the token, or None
    :rtype: unicode or None
    """
    if not token.startswith(API_TOKEN_PREFIX):
        return None

    token_obj = models.Token.get_by_value(token)
    if token_obj:
        return token_obj.userid
    else:
        return None
